name: Test Reporting Automated Vulnerability Results Report

on:
  workflow_dispatch:

env:
  RESOURCES_PATH: src/test/python3/resources

jobs:
  test-action:
    name: Test Automated Vulnerability Results Report
    strategy:
      matrix:
        system: [
          { os: ubuntu-22.04, sonarqube-url: "https://sonarqube-ubuntu.b00158319.com",  include-grype: true,  include-eclipse-steady: true,  run-unit-tests: true  },
          { os: windows-2022, sonarqube-url: "https://sonarqube-windows.b00158319.com", include-grype: false, include-eclipse-steady: false, run-unit-tests: false },
          { os: macos-14,     sonarqube-url: "https://sonarqube.a.pinggy.link",         include-grype: true,  include-eclipse-steady: false, run-unit-tests: true  }
        ]
        category: [
          { experiment-id: 1, programming-language: java,       github-repository-name: H6060-Java-Logback,      include-eclipse-steady: true  },
          { experiment-id: 2, programming-language: python,     github-repository-name: H6060-Python-Django,     include-eclipse-steady: true  },
          { experiment-id: 3, programming-language: javascript, github-repository-name: H6060-JavaScript-Lodash, include-eclipse-steady: false }
        ]
    runs-on: ${{ matrix.system.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Eclipse Steady Environment Variable
        shell: bash
        run: |
          if [[ "${{ matrix.category.include-eclipse-steady }}" == "true" && "${{ matrix.system.include-eclipse-steady }}" == "true" ]]; then
              echo "SCA_ECLIPSE_STEADY_REPORT_FILENAME=${{ env.RESOURCES_PATH }}/sca-eclipse-steady/${{ matrix.category.programming-language }}/eclipse-steady-report.json" >> $GITHUB_ENV
          else
              echo "SCA_ECLIPSE_STEADY_REPORT_FILENAME=" >> $GITHUB_ENV
          fi

      - name: Set Grype Environment Variable
        shell: bash
        run: |
          if [[ "${{ matrix.system.include-grype }}" == "true" ]]; then
              echo "SCA_GRYPE_REPORT_FILENAME=${{ env.RESOURCES_PATH }}/sca-grype/${{ matrix.category.programming-language }}/grype-report.json" >> $GITHUB_ENV
          else
              echo "SCA_GRYPE_REPORT_FILENAME=" >> $GITHUB_ENV
          fi

      - name: Get SonarQube Token
        if: ${{ matrix.system.os == 'ubuntu-22.04' || matrix.system.os == 'macos-14' }}
        shell: bash
        run: |
          if [[ "${{ matrix.system.os }}" == "ubuntu-22.04" ]]; then
              echo "SONARQUBE_USER_TOKEN=${{ secrets.TEST_SONARQUBE_USER_TOKEN_UBUNTU }}" >> $GITHUB_ENV       
          else
              echo "SONARQUBE_USER_TOKEN=${{ secrets.TEST_SONARQUBE_USER_TOKEN_MACOS }}" >> $GITHUB_ENV
          fi

      - name: Get SonarQube Token
        if: ${{ matrix.system.os == 'windows-2022' }}
        shell: pwsh
        run: echo "SONARQUBE_USER_TOKEN=${{ secrets.TEST_SONARQUBE_USER_TOKEN_WINDOWS }}" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Create Security Testing Tool Report (${{ matrix.category.programming-language }})
        uses: ./.github/actions/reporting/vulnerability-results-report/automated
        with:
          nvd-api-key: ${{ secrets.TEST_NVD_API_KEY }}
          github-api-token: ${{ secrets.TEST_GITHUB_API_TOKEN }}
          opencve-username: ${{ secrets.TEST_OPENCVE_USERNAME }}
          opencve-password: ${{ secrets.TEST_OPENCVE_PASSWORD }}
          experiment-id: ${{ matrix.category.experiment-id }}
          experiment-github-project-name: ${{ matrix.category.github-repository-name }}
          experiment-github-repository: seansmith2600/${{ matrix.category.github-repository-name }}
          experiment-programming-language: ${{ matrix.category.programming-language }}
          sonarqube-url: ${{ matrix.system.sonarqube-url }}
          sonarqube-user-token: ${{ env.SONARQUBE_USER_TOKEN }}
          sonarqube-project-key: test-${{ matrix.category.programming-language }}
          deepsource-api-key: ${{ secrets.TEST_DEEPSOURCE_API_KEY }}
          sast-horusec-report-filename: ${{ env.RESOURCES_PATH }}/sast-horusec/${{ matrix.category.programming-language }}/horusec-report.json
          sast-semgrep-report-filename: ${{ env.RESOURCES_PATH }}/sast-semgrep/${{ matrix.category.programming-language }}/semgrep-report.json
          sast-snyk-code-report-filename: ${{ env.RESOURCES_PATH }}/sast-snyk-code/${{ matrix.category.programming-language }}/snyk-code-report.json
          sca-eclipse-steady-report-filename: ${{ env.SCA_ECLIPSE_STEADY_REPORT_FILENAME }}
          sca-grype-report-filename: ${{ env.RESOURCES_PATH }}/sca-grype/${{ matrix.category.programming-language }}/grype-report.json
          sca-snyk-report-filename: ${{ env.RESOURCES_PATH }}/sca-snyk/${{ matrix.category.programming-language }}/snyk-report.json
          sca-owasp-dependency-check-report-filename: ${{ env.RESOURCES_PATH }}/sca-owasp-dependency-check/${{ matrix.category.programming-language }}/owasp-dependency-check-report.json
          artifact-name: automated-vulnerability-results-report-${{ matrix.category.programming-language }}-${{ matrix.system.os }}
          include-unit-tests: ${{ matrix.system.run-unit-tests }}
